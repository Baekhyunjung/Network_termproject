package chattingTest;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import java.util.Calendar;
import java.util.Date;;

public class publicTest {
	
	public static String publicTest() throws IOException, ParseException {
		// 성남시 수정구의 날씨예보
    	String serviceKey = "in%2BNuMV%2FzENuIsfDAyCCQvESA2b6FpLtL8rIoFqZ4ihErYy9xs4ta1XOCGs2tKZbHfdna83Y%2Botvu3knIxcyJA%3D%3D";
    	String dataType = "JSON";  // or "XML"
    	
    	Calendar cal = Calendar.getInstance();
    	int year = cal.get(cal.YEAR);
		int month = cal.get(cal.MONTH) + 1;
		int day = cal.get(cal.DATE);
		int hour = cal.get(cal.HOUR_OF_DAY);
		int min = cal.get(cal.MINUTE);
		
		String date = Integer.toString(year) + Integer.toString(month) + Integer.toString(day);
    	String time = Integer.toString(hour) + Integer.toString(min);
		
        StringBuilder urlBuilder = new StringBuilder("http://apis.data.go.kr/1360000/VilageFcstInfoService/getUltraSrtNcst"); // URL
        urlBuilder.append("?" + URLEncoder.encode("ServiceKey","UTF-8") + "=" + serviceKey); // Service Key
        urlBuilder.append("&" + URLEncoder.encode("pageNo","UTF-8") + "=" + URLEncoder.encode("1", "UTF-8"));
        urlBuilder.append("&" + URLEncoder.encode("numOfRows","UTF-8") + "=" + URLEncoder.encode("10", "UTF-8"));
        urlBuilder.append("&" + URLEncoder.encode("dataType","UTF-8") + "=" + URLEncoder.encode(dataType, "UTF-8")); // data type(XML/JSON)
        urlBuilder.append("&" + URLEncoder.encode("base_date","UTF-8") + "=" + URLEncoder.encode(date, "UTF-8")); //날짜
        urlBuilder.append("&" + URLEncoder.encode("base_time","UTF-8") + "=" + URLEncoder.encode(time, "UTF-8")); //시간
        urlBuilder.append("&" + URLEncoder.encode("nx","UTF-8") + "=" + URLEncoder.encode("63", "UTF-8")); //지역의 x좌표
        urlBuilder.append("&" + URLEncoder.encode("ny","UTF-8") + "=" + URLEncoder.encode("124", "UTF-8")); //지역의 y좌표
        
        URL url = new URL(urlBuilder.toString());
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        conn.setRequestProperty("Content-type", "application/json");
        
        BufferedReader rd;
        if(conn.getResponseCode() >= 200 && conn.getResponseCode() <= 300) {
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        } else {
            rd = new BufferedReader(new InputStreamReader(conn.getErrorStream()));
        }
        
        String result = "";
        String line;
        while ((line = rd.readLine()) != null) {
            result = result.concat(line);
        }
        
        JSONParser parser = new JSONParser(); // JSON parsing
        JSONObject obj1 = (JSONObject)parser.parse(result);
        JSONObject obj2 = (JSONObject)obj1.get("response");
        JSONObject obj3 = (JSONObject)obj2.get("body");
        JSONObject obj4 = (JSONObject)obj3.get("items");
        JSONArray parse_listArr = (JSONArray)obj4.get("item");
        
        String real = "";
        //날짜, 시간, 예보값 가져옴
        for(int i = 0; i < parse_listArr.size(); i++) {
        	JSONObject weather = (JSONObject)parse_listArr.get(i);
        	String baseDate = (String)weather.get("baseDate");
        	String baseTime = (String)weather.get("baseTime");
        	String obsrValue = (String)weather.get("obsrValue");
        	if(i == 3) {
        		real = obsrValue;
        	}
        	StringBuffer sb = new StringBuffer();
	        sb.append("예보 값 : " + obsrValue);
        }
        
        rd.close();
        conn.disconnect();
        return (year + "/" + month + "/" + day + "   "+ real + "°C");
        
	}
	
		

	public static void main(String[] args) throws IOException, ParseException {
    	
    	
	}
}
